# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
# pip install python-telegram-bot==20.3

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7659801527:AAEVQxwPFm6HBLFFi0SoEpjdpkunolyuAro"
ADMIN_IDS = [5445206649]
GROUPS_FILE = "groups.txt"
awaiting_admin_action = {}
ping_history = {}  # –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º

# === –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ ===
def load_groups():
    if not os.path.exists(GROUPS_FILE):
        open(GROUPS_FILE, "w", encoding="utf-8").close()
        return []
    with open(GROUPS_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def save_groups(groups):
    with open(GROUPS_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(groups))

def add_group(chat_id, title):
    if not os.path.exists(GROUPS_FILE):
        open(GROUPS_FILE, "w", encoding="utf-8").close()
    groups = load_groups()
    entry = f"{chat_id} ({title})"
    if all(str(chat_id) not in g for g in groups):
        groups.append(entry)
        save_groups(groups)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {entry}")

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def show_main_menu(chat_id, context):
    keyboard = [
        [InlineKeyboardButton("üìã Projects", callback_data="list_projects")],
        [InlineKeyboardButton("‚ÑπÔ∏è Info", callback_data="info")],
        [InlineKeyboardButton("üë• Admins", callback_data="admin_panel")],
        [InlineKeyboardButton("‚ùå Exit", callback_data="exit")]
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å B2B iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –Ω–æ –ø–æ–º–Ω–∏, –ø–æ–∫–∞ —Ç—ã –¥—É–º–∞–µ—à—å - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –¥–µ–ª–∞—é—Ç üôÇ",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update.effective_chat.id, context)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "main_menu":
        await show_main_menu(query.message.chat_id, context)

    elif data == "list_projects":
        groups = load_groups()
        text = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n" + ("\n".join(groups) if groups else "–ù–µ—Ç –≥—Ä—É–ø–ø.")
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–∏–Ω–≥ –ø–æ –ø—Ä–æ–µ–∫—Ç—É", callback_data="ping_all")],
            [InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –ø–æ –ø–∏–Ω–≥—É", callback_data="ping_report")],
            [InlineKeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_groups")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "refresh_groups":
        groups = load_groups()
        text = "üîÑ –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:\n" + ("\n".join(groups) if groups else "–ù–µ—Ç –≥—Ä—É–ø–ø.")
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "info":
        text = (
            "üìò *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "üë®‚Äçüíª *–û –±–æ—Ç–µ:*\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ —Å—Ñ–µ—Ä–µ *B2B iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏*:\n"
            "‚Ä¢ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞\n\n"
            
            "üì• *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:*\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ Telegram-–≥—Ä—É–ø–ø—É, –≥–¥–µ –≤–µ–¥—ë—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "2. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ Telegram –≤–∫–ª—é—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä* –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –µ—ë –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç\n\n"

            "üõ† *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ –ú–∞—Å—Å–æ–≤–∞—è –∏ –≤—ã–±–æ—Ä–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã\n\n"
            
            "üë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n"
            "*–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n" +
            "\n".join([f"‚Ä¢ `{i}`" for i in ADMIN_IDS])
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]),
            parse_mode="Markdown"
        )

    elif data == "admin_panel":
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "add_admin":
        awaiting_admin_action[user_id] = "add"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "remove_admin":
        awaiting_admin_action[user_id] = "remove"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "ping_all":
        groups = load_groups()
        if not groups:
            await query.message.edit_text("‚ùó –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return

        project_list = "\n".join([f"{idx+1}. {entry.split(' ', 1)[-1]}" for idx, entry in enumerate(groups)])

        control_buttons = [
            [InlineKeyboardButton("üì§ –ü–∏–Ω–≥ –≤—Å–µ—Ö", callback_data="ping_all_now")],
            [InlineKeyboardButton("üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –ø–∏–Ω–≥", callback_data="ping_select_mode")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]

        keyboard = control_buttons
        await query.message.edit_text(f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n{project_list}", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "ping_all_now":
        groups = load_groups()
        success, failed = 0, 0
        for entry in groups:
            group_id = int(entry.split()[0])
            try:
                await context.bot.send_message(
                    group_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?\n\n‚è≥ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.\n\nüì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞."
                )
                ping_history[group_id] = []
                success += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {group_id}: {e}")
                failed += 1

        await query.message.edit_text(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–∫–∏: {failed}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )

    elif data == "ping_select_mode":
        groups = load_groups()
        if not groups:
            await query.message.edit_text("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ping_all")]]))
            return

        text = "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n"
        text += "\n".join([f"{idx+1}. {entry.split(' ', 1)[-1]}" for idx, entry in enumerate(groups)])
        text += "\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)"

        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ping_all")]]))
        context.user_data["awaiting_group_selection"] = True

    elif data.startswith("ping_one_"):
        idx = int(data.split("_")[-1])
        groups = load_groups()
        if idx >= len(groups):
            await query.message.edit_text("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        group_id = int(groups[idx].split()[0])
        try:
            await context.bot.send_message(
                group_id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?\n\n‚è≥ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.\n\nüì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞."
            )
            await query.message.edit_text(f"‚úÖ –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {groups[idx]}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ping_select_mode")]]))
        except Exception as e:
            await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ping_select_mode")]]))

    elif data == "exit":
        await query.message.delete()

    elif data == "ping_report":
        keyboard = [
            [InlineKeyboardButton("üïê –ó–∞ 1 —á–∞—Å", callback_data="report_1")],
            [InlineKeyboardButton("üïì –ó–∞ 4 —á–∞—Å–∞", callback_data="report_4")],
            [InlineKeyboardButton("üïõ –ó–∞ 24 —á–∞—Å–∞", callback_data="report_24")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list_projects")]
        ]
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("report_"):
        period = int(data.split("_")[1])
        groups = load_groups()
        now = update.effective_message.date.timestamp()
        results = []

        for entry in groups:
            gid = int(entry.split()[0])
            history = ping_history.get(gid, [])
            recent = [msg_time for msg_time in history if now - msg_time <= period * 3600]
            status = "‚úÖ" if recent else "‚ùå"
            results.append(f"{status} {entry}")

        text = "üìä –û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n" + "\n".join(results)
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ping_report")]]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if chat.type in ["group", "supergroup"]:
        add_group(chat.id, chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        if update.message.reply_to_message and update.message.reply_to_message.from_user.id == (await context.bot.get_me()).id:
            ts = update.message.date.timestamp()
            ping_history.setdefault(chat.id, []).append(ts)

    if context.user_data.get("awaiting_group_selection"):
        context.user_data["awaiting_group_selection"] = False
        groups = load_groups()
        try:
            selected_indices = [int(i.strip()) - 1 for i in text.split(",")]
            success, failed = 0, 0
            for idx in selected_indices:
                if 0 <= idx < len(groups):
                    group_id = int(groups[idx].split()[0])
                    try:
                        await context.bot.send_message(
                            group_id,
                            "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?\n\n‚è≥ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.\n\nüì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞."
                        )
                        context.chat_data[f"ping_history_{group_id}"] = []
                        success += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ {group_id}: {e}")
                        failed += 1
            await update.message.reply_text(
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–∫–∏: {failed}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list_projects")]
                ])
            )
        except:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2")
        return

    if user_id in awaiting_admin_action:
        action = awaiting_admin_action.pop(user_id)
        try:
            new_id = int(text)
            if action == "add":
                if new_id not in ADMIN_IDS:
                    ADMIN_IDS.append(new_id)
                    await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!")
                else:
                    await update.message.reply_text("‚ÑπÔ∏è –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
            elif action == "remove":
                if new_id in ADMIN_IDS:
                    ADMIN_IDS.remove(new_id)
                    await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω —É–¥–∞–ª—ë–Ω!")
                else:
                    await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.")
        except:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

from telegram.ext import ChatMemberHandler

def remove_group(chat_id):
    groups = load_groups()
    updated = [g for g in groups if not g.startswith(str(chat_id))]
    save_groups(updated)

async def handle_membership(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = update.my_chat_member.new_chat_member.status
    chat_id = update.effective_chat.id
    if status in ["left", "kicked"]:
        remove_group(chat_id)
        print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {chat_id} ‚Äî –±–æ—Ç —É–¥–∞–ª—ë–Ω")

app.add_handler(ChatMemberHandler(handle_membership, chat_member_types=ChatMemberHandler.MY_CHAT_MEMBER))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()